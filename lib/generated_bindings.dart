// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int initialize() {
    return _initialize();
  }

  late final _initializePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('initialize');
  late final _initialize = _initializePtr.asFunction<int Function()>();

  int attemptLogin(
    ffi.Pointer<ffi.UnsignedChar> username,
    ffi.Pointer<ffi.UnsignedChar> password,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> callback,
  ) {
    return _attemptLogin(
      username,
      password,
      callback,
    );
  }

  late final _attemptLoginPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<ffi.UnsignedChar>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>(
      'attemptLogin');
  late final _attemptLogin = _attemptLoginPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();
}
